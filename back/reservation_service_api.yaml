openapi: "3.0.3"
info:
  title: "back API"
  description: "back API"
  version: "1.0.0"
servers:
  - url: "https://back"
paths:
  /users:
    get:
      summary: "GET users"
      operationId: "all"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/User"
        "404":
          description: "Not Found"
        "401":
          description: "Unauthorized"
  /users/{name}/reservations:
    get:
      summary: "GET users/{name}/reservations"
      operationId: "findReservationsByUser"
      parameters:
        - name: "name"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/ReservationDto"
        "404":
          description: "Not Found"
        "401":
          description: "Unauthorized"
  /resources:
    get:
      summary: "GET resources"
      operationId: "all"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Resource"
        "404":
          description: "Not Found"
        "401":
          description: "Unauthorized"
  /resources/acquire:
    post:
      summary: "POST resources/acquire"
      operationId: "acquire"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AcquireDto"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Id"
        "404":
          description: "Not Found"
        "401":
          description: "Unauthorized"
        "400":
          description: "Bad Request"
  /resources/create:
    post:
      summary: "POST resources/create"
      operationId: "create"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResourceDto"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "boolean"
        "409":
          description: "Conflict"
        "401":
          description: "Unauthorized"
        "400":
          description: "Bad Request"
  /resources/release/{id}:
    post:
      summary: "POST resources/release/{id}"
      operationId: "release"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "boolean"
        "404":
          description: "Not Found"
        "401":
          description: "Unauthorized"
        "400":
          description: "Bad Request"
  /resources/{name}/reservations:
    get:
      summary: "GET resources/{name}/reservations"
      operationId: "findByResource"
      parameters:
        - name: "name"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/ReservationDto"
        "404":
          description: "Not Found"
        "401":
          description: "Unauthorized"
  /reservations:
    get:
      summary: "GET reservations"
      operationId: "findByTime"
      parameters:
        - name: "date"
          in: "query"
          required: true
          schema:
            type: "string"
            format: "date-time"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/ReservationDto"
        "404":
          description: "Not Found"
        "401":
          description: "Unauthorized"
  /reservations/{id}:
    get:
      summary: "GET reservations/{id}"
      operationId: "findById"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ReservationDto"
        "404":
          description: "Not Found"
        "401":
          description: "Unauthorized"
  /login:
    post:
      summary: "POST login"
      operationId: "authenticateUser"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserAuthDto"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "boolean"
        "404":
          description: "Not Found"
        "400":
          description: "Bad Request"
  /signup:
    post:
      summary: "POST signup"
      operationId: "registerUser"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserAuthDto"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "boolean"
        "409":
          description: "Conflict"
        "400":
          description: "Bad Request"
components:
  schemas:
    Resource:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        name:
          type: "string"
        reservations:
          type: "array"
          items:
            $ref: "#/components/schemas/Reservation"
    Reservation:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        reservationStart:
          type: "string"
          format: "date-time"
        reservationEnd:
          type: "string"
          format: "date-time"
        user:
          $ref: "#/components/schemas/User"
        resource:
          $ref: "#/components/schemas/Resource"
    Role:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        name:
          type: "string"
    User:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        name:
          type: "string"
        password:
          type: "string"
        reservations:
          type: "array"
          items:
            $ref: "#/components/schemas/Reservation"
        authorities:
          type: "array"
          items:
            $ref: "#/components/schemas/Role"
    UserDto:
      type: "object"
      properties:
        name:
          type: "string"
    ResourceDto:
      type: "object"
      properties:
        name:
          type: "string"
    ReservationDto:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        reservationStart:
          type: "string"
          format: "date-time"
        reservationEnd:
          type: "string"
          format: "date-time"
        user:
          $ref: "#/components/schemas/UserDto"
        resource:
          $ref: "#/components/schemas/ResourceDto"
    AcquireDto:
      type: "object"
      properties:
        user:
          $ref: "#/components/schemas/UserDto"
        resource:
          $ref: "#/components/schemas/ResourceDto"
        start:
          type: "string"
          format: "date-time"
        end:
          type: "string"
          format: "date-time"
    Id:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
    UserAuthDto:
      type: "object"
      properties:
        name:
          type: "string"
        password:
          type: "string"