version: "3.9"

services:
  frontend:
    container_name: frontend
    build:
      context: ./front/react-front
      args:
        REACT_APP_API_URL: http://localhost:8080
    ports:
      - "3000:3000"
    restart: on-failure
    networks:
      - net
    depends_on:
      - backend

  backend:
    container_name: backend
    build: ./back
    ports:
      - "8080:8080"
    restart: on-failure
    environment:
      ALLOWED_ORIGINS: http://localhost:3000
      DMS: postgresql
      DATABASE_HOSTNAME: sber-db
      DATABASE_PORT: 5432
      DATABASE_NAME: postgres
      DATABASE_USER: postgres
      DATABASE_PASSWORD: postgres
    networks:
      - net
    depends_on:
      - db

  db:
    container_name: sber-db
    image: postgres:16.2
    restart: on-failure
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
      - dbvolume:/var/lib/postgresql/dbvolume
    ports:
      - "5432"
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    networks:
      - net

  grafana:
    container_name: grafana
    image: grafana/grafana-oss
    restart: on-failure
    ports:
      - "3001:3000"
    volumes:
      - grafanavolume:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    networks:
      - net
  
  prometheus:
    container_name: prometheus
    image: prom/prometheus
    restart: on-failure
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheusvolume:/prometheus
    networks:
      - net

  postgres-exporter:
    container_name: postgres-exporter
    image: prometheuscommunity/postgres-exporter
    restart: on-failure
    ports:
      - "9187"
    environment:
      DATA_SOURCE_NAME: postgresql://postgres:postgres@sber-db:5432/postgres?sslmode=disable
    networks:
      - net

volumes:
  dbvolume:
  grafanavolume:
  prometheusvolume:

networks:
  net:
    driver: bridge
